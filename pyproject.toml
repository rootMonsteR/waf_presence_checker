[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "waf-presence-checker-lite"
version = "0.1.0"
description = "Offline analyzer that estimates whether HTTP responses likely came from a site protected by a WAF/CDN/edge firewall. It does not send network traffic."
readme = "README.md"
requires-python = ">=3.9"
authors = [
  {name = "WAF Presence Checker Contributors", email = "security@example.com"}
]
license = {text = "MIT"}
keywords = ["waf", "firewall", "security", "headers", "forensics", "offline", "pentesting", "authorized-testing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
    "Operating System :: OS Independent"
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "ruff>=0.0.285",
    "pre-commit>=3.3.3"
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/waf-presence-checker"
Documentation = "https://github.com/yourusername/waf-presence-checker/blob/main/README.md"
"Source Code" = "https://github.com/yourusername/waf-presence-checker"
"Bug Tracker" = "https://github.com/yourusername/waf-presence-checker/issues"

[project.scripts]
wafpc = "waf_presence_checker.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["waf_presence_checker*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=waf_presence_checker",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
source = ["waf_presence_checker"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
